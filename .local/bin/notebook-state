#!/bin/bash
# Scritp to manage notebook states. When a key is pressed, it may trigger several actions.
# Dependencies:
#   libnotify-id
#   dunst
#   acpilight
#   alsa-utils
#	playerctl
#   xorg-xset
#   gnome-icon-theme
#   feh
#   i3lock

time=1000

case $1 in

	caps-lock )
		state="$(sleep 0.1; xset q | grep "Caps Lock" | awk -F" " '{print $4}')"
		notify-send -t $time -r 100 -i dialog-information "Caps Lock $state"
		canberra-gtk-play -i dialog-information
		;;
    
	num-lock )
		state="$(sleep 0.1; xset q | grep "Num Lock" | awk -F" " '{print $8}')"
		notify-send -t $time -r 100 -i dialog-information "Num Lock $state"
		canberra-gtk-play -i dialog-information
		;;
	
	backlight-up )
		xbacklight -inc 2
		notify-send -t $time -r 200 -i dialog-information "Backlight $(xbacklight -get)%"
		;;
	
	backlight-down )
		xbacklight -dec 2
		notify-send -t $time -r 200 -i dialog-information "Backlight $(xbacklight -get)%"
		;;
	
	volume-up )
		amixer set Master 5%+
		volume="$(amixer sget Master | grep 'Right:' | awk -F'[][]' '{ print $2 }')"
		notify-send -t $time -r 300 -i audio-volume-high "Volume $volume"
		;;
	
	volume-down )
		amixer set Master 5%-
		volume="$(amixer sget Master | grep 'Right:' | awk -F'[][]' '{ print $2 }')"
		notify-send -t $time -r 300 -i audio-volume-low "Volume $volume"
		;;
	
	volume-mute )
		amixer set Master toggle
		if [ -n "$(amixer get Master | grep -w -m 1 "off")" ]
		then
			notify-send -t $time -r 400 -i audio-volume-muted "Volume muted"
		else
			volume="$(amixer sget Master | grep 'Right:' | awk -F'[][]' '{ print $2 }')"
			notify-send -t $time -r 400 -i audio-volume-medium "Volume $volume"
		fi
		;;

	player-play )
		if [ -n "$(pgrep cmus)" ]
		then
			cmus-remote -u
		else
			urxvtc -name "cmus" -e "cmus"
		fi
		;;
	
	player-previous )
		if [ -n "$(pgrep cmus)" ]
		then
			cmus-remote -r
		fi
		;;

	player-next )
		if [ -n "$(pgrep cmus)" ]
		then
			cmus-remote -n
		fi
		;;

	screen-shot )
		scrot '%Y-%m-%d-%T_screenshot.png'
		canberra-gtk-play -i camera-shutter
		;;
	
	screen-shot-focused )
		scrot -u '%Y-%m-%d-%T_screenshot.png'
		canberra-gtk-play -i camera-shutter
		;;
	
	screen-off )
		sleep 0.1 && xset dpms force off
		;;
	
	screen-lock )
		image=$(cat ~/.fehbg | grep feh | awk '{print $4}' | sed 's/\x27//g')
		i3lock -i $image
		;;
    
	toggle-autolock )
		previous_state="$(xset q | grep "DPMS is" | awk -F" " '{print $3}')"
		if [ $previous_state = "Enabled" ]
		then
			xautolock -disable
			xset s off -dpms
		else
			xautolock -enable
			xset s on +dpms
		fi
		current_state="$(xset q | grep "DPMS is" | awk -F" " '{print $3}')"
		notify-send -t $time -r 600  -i dialog-information "Screen Auto Lock $current_state"
		canberra-gtk-play -i dialog-information
		;;
	
	session-kill )
		loginctl | grep $USER | awk '{print $1}' | xargs loginctl terminate-session
		;;
	
	open-ranger )
		urxvtc -name ranger -e ranger
		;;
	
	floating-terminal )
		urxvtc -name dropdown -g 82x22+704+0 -e sh -c "neofetch; bash"
		;;

	* )
		echo "Usage: $0 <caps-lock, num-lock, backlight-up, backlight-down, volume-up, volume-down, volume-mute, player-play, player-previous, player-next, screen-shot, screen-shot-focused, screen-off, screen-lock, toggle-autolock, session-kill>"
		;;

esac


